// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: customer/Owner.proto

package customer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OwnerService_CreateOwner_FullMethodName = "/petclinic.customers.OwnerService/CreateOwner"
	OwnerService_GetOwner_FullMethodName    = "/petclinic.customers.OwnerService/GetOwner"
	OwnerService_ListOwners_FullMethodName  = "/petclinic.customers.OwnerService/ListOwners"
	OwnerService_UpdateOwner_FullMethodName = "/petclinic.customers.OwnerService/UpdateOwner"
)

// OwnerServiceClient is the client API for OwnerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Owner service definition
type OwnerServiceClient interface {
	// Create Owner
	// Maps to: POST /owners
	CreateOwner(ctx context.Context, in *OwnerRequest, opts ...grpc.CallOption) (*OwnerResponse, error)
	// Get Owner by ID
	// Maps to: GET /owners/{ownerId}
	GetOwner(ctx context.Context, in *GetOwnerRequest, opts ...grpc.CallOption) (*OwnerResponse, error)
	// List all Owners
	// Maps to: GET /owners
	ListOwners(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*OwnersListResponse, error)
	// Update Owner
	// Maps to: PUT /owners/{ownerId}
	UpdateOwner(ctx context.Context, in *UpdateOwnerRequest, opts ...grpc.CallOption) (*UpdateOwnerResponse, error)
}

type ownerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOwnerServiceClient(cc grpc.ClientConnInterface) OwnerServiceClient {
	return &ownerServiceClient{cc}
}

func (c *ownerServiceClient) CreateOwner(ctx context.Context, in *OwnerRequest, opts ...grpc.CallOption) (*OwnerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OwnerResponse)
	err := c.cc.Invoke(ctx, OwnerService_CreateOwner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ownerServiceClient) GetOwner(ctx context.Context, in *GetOwnerRequest, opts ...grpc.CallOption) (*OwnerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OwnerResponse)
	err := c.cc.Invoke(ctx, OwnerService_GetOwner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ownerServiceClient) ListOwners(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*OwnersListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OwnersListResponse)
	err := c.cc.Invoke(ctx, OwnerService_ListOwners_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ownerServiceClient) UpdateOwner(ctx context.Context, in *UpdateOwnerRequest, opts ...grpc.CallOption) (*UpdateOwnerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateOwnerResponse)
	err := c.cc.Invoke(ctx, OwnerService_UpdateOwner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OwnerServiceServer is the server API for OwnerService service.
// All implementations must embed UnimplementedOwnerServiceServer
// for forward compatibility.
//
// Owner service definition
type OwnerServiceServer interface {
	// Create Owner
	// Maps to: POST /owners
	CreateOwner(context.Context, *OwnerRequest) (*OwnerResponse, error)
	// Get Owner by ID
	// Maps to: GET /owners/{ownerId}
	GetOwner(context.Context, *GetOwnerRequest) (*OwnerResponse, error)
	// List all Owners
	// Maps to: GET /owners
	ListOwners(context.Context, *emptypb.Empty) (*OwnersListResponse, error)
	// Update Owner
	// Maps to: PUT /owners/{ownerId}
	UpdateOwner(context.Context, *UpdateOwnerRequest) (*UpdateOwnerResponse, error)
	mustEmbedUnimplementedOwnerServiceServer()
}

// UnimplementedOwnerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOwnerServiceServer struct{}

func (UnimplementedOwnerServiceServer) CreateOwner(context.Context, *OwnerRequest) (*OwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOwner not implemented")
}
func (UnimplementedOwnerServiceServer) GetOwner(context.Context, *GetOwnerRequest) (*OwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOwner not implemented")
}
func (UnimplementedOwnerServiceServer) ListOwners(context.Context, *emptypb.Empty) (*OwnersListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOwners not implemented")
}
func (UnimplementedOwnerServiceServer) UpdateOwner(context.Context, *UpdateOwnerRequest) (*UpdateOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOwner not implemented")
}
func (UnimplementedOwnerServiceServer) mustEmbedUnimplementedOwnerServiceServer() {}
func (UnimplementedOwnerServiceServer) testEmbeddedByValue()                      {}

// UnsafeOwnerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OwnerServiceServer will
// result in compilation errors.
type UnsafeOwnerServiceServer interface {
	mustEmbedUnimplementedOwnerServiceServer()
}

func RegisterOwnerServiceServer(s grpc.ServiceRegistrar, srv OwnerServiceServer) {
	// If the following call pancis, it indicates UnimplementedOwnerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OwnerService_ServiceDesc, srv)
}

func _OwnerService_CreateOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OwnerServiceServer).CreateOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OwnerService_CreateOwner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OwnerServiceServer).CreateOwner(ctx, req.(*OwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OwnerService_GetOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OwnerServiceServer).GetOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OwnerService_GetOwner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OwnerServiceServer).GetOwner(ctx, req.(*GetOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OwnerService_ListOwners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OwnerServiceServer).ListOwners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OwnerService_ListOwners_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OwnerServiceServer).ListOwners(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OwnerService_UpdateOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OwnerServiceServer).UpdateOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OwnerService_UpdateOwner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OwnerServiceServer).UpdateOwner(ctx, req.(*UpdateOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OwnerService_ServiceDesc is the grpc.ServiceDesc for OwnerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OwnerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "petclinic.customers.OwnerService",
	HandlerType: (*OwnerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOwner",
			Handler:    _OwnerService_CreateOwner_Handler,
		},
		{
			MethodName: "GetOwner",
			Handler:    _OwnerService_GetOwner_Handler,
		},
		{
			MethodName: "ListOwners",
			Handler:    _OwnerService_ListOwners_Handler,
		},
		{
			MethodName: "UpdateOwner",
			Handler:    _OwnerService_UpdateOwner_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "customer/Owner.proto",
}
